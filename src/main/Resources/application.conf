client {
  # The default value of the `User-Agent` header to produce if no
  # explicit `User-Agent`-header was included in a request.
  # If this value is the empty string and no header was included in
  # the request, no `User-Agent` header will be rendered at all.
  user-agent-header = akka-http/${akka.http.version}

  # The time period within which the TCP connecting process must be completed.
  connecting-timeout = 10s

  # The time after which an idle connection will be automatically closed.
  # Set to `infinite` to completely disable idle timeouts.
  idle-timeout = 60 s

  # The initial size of the buffer to render the request headers in.
  # Can be used for fine-tuning request rendering performance but probably
  # doesn't have to be fiddled with in most applications.
  request-header-size-hint = 512

  # Socket options to set for the listening socket. If a setting is left
  # undefined, it will use whatever the default on the system is.
  socket-options {
    so-receive-buffer-size = undefined
    so-send-buffer-size = undefined
    so-reuse-address = undefined
    so-traffic-class = undefined
    tcp-keep-alive = undefined
    tcp-oob-inline = undefined
    tcp-no-delay = undefined
  }

  # Client https proxy options. When using ClientTransport.httpsProxy() with or without credentials,
  # host/port must be either passed explicitly or set here. If a host is not set, the proxy will not be used.
  proxy {
    https {
      host = ""
      port = 443
    }
  }

  # Modify to tweak parsing settings on the client-side only.
  parsing {
    # no overrides by default, see `akka.http.parsing` for default values

    # Default maximum content length which should not be exceeded by incoming response entities.
    # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
    # Note that it is not necessarily a problem to set this to a high value as all stream operations
    # are always properly backpressured.
    #
    # On the client-side, this limit is disabled by default because a client controls the requests it runs.
    #
    # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
    # programmatically via `withSizeLimit`.)
    max-content-length = infinite
  }

  # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
  # client for debugging reasons.
  #
  # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
  #
  # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
  # specify the number of bytes to log per chunk of data (the actual chunking depends
  # on implementation details and networking conditions and should be treated as
  # arbitrary).
  #
  # For logging on the server side, see akka.http.server.log-unencrypted-network-bytes.
  #
  # `off` : no log messages are produced
  # Int   : determines how many bytes should be logged per data chunk
  log-unencrypted-network-bytes = off

  websocket {
    # periodic keep alive may be implemented using by sending Ping frames
    # upon which the other side is expected to reply with a Pong frame,
    # or by sending a Pong frame, which serves as unidirectional heartbeat.
    # Valid values:
    #   ping - default, for bi-directional ping/pong keep-alive heartbeating
    #   pong - for uni-directional pong keep-alive heartbeating
    #
    # See https://tools.ietf.org/html/rfc6455#section-5.5.2
    # and https://tools.ietf.org/html/rfc6455#section-5.5.3 for more information
    periodic-keep-alive-mode = ping

    # Interval for sending periodic keep-alives
    # The frame sent will be the one configured in akka.http.server.websocket.periodic-keep-alive-mode
    # `infinite` by default, or a duration that is the max idle interval after which an keep-alive frame should be sent
    periodic-keep-alive-max-idle = infinite

    # Enable verbose debug logging for all ingoing and outgoing frames
    log-frames = false
  }

  # Cancellation in the HTTP streams is delayed by this duration to prevent race conditions between cancellation
  # and stream completion / failure. In most cases, the value chosen here should make no difference because
  # HTTP streams are loops where completion and failures should propagate immediately and make the handling of
  # cancellations redundant.
  #
  # In most cases, there should be no reason to change this setting.
  #
  # Set to 0 to disable the delay.
  stream-cancellation-delay = 100 millis
}

# Slick configuration
slick {
  profile = "slick.jdbc.SQLiteProfile$"
  db {
    driver = "org.sqlite.JDBC"
    url = "jdbc:sqlite:C:\\Users\\ivorc\\Desktop\\passangers.db" # Replace with the path to your SQLite database file
    connectionPool = disabled
    keepAliveConnection = true
  }
}

# Akka configuration
akka {
  loglevel = "debug" # Set log level as needed
}
# C:\\Users\\ivorc\\Downloads\\sqlite-jdbc-3.41.2.1.jar