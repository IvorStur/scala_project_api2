[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\MA\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\MA\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 20)
[debug]       Load.loadUnit: plugins took 374.8877ms
[debug]       Load.loadUnit: defsScala took 0.7465ms
[debug] [Loading] Scanning directory C:\Users\MA\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MA\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 40.2091 ms
[debug]           Load.resolveProject(global-plugins) took 121.4072ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\MA\.sbt\1.0\plugins, plugins: List(<none>))) took 226.1783ms
[debug] [Loading] Done in C:\Users\MA\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 317.4263ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7412ms
[debug]     Load.loadUnit(file:/C:/Users/MA/.sbt/1.0/plugins/, ...) took 717.6444ms
[debug]   Load.apply: load took 1248.2758ms
[debug]   Load.apply: resolveProjects took 22.2857ms
[debug]   Load.apply: finalTransforms took 134.3966ms
[debug]   Load.apply: config.delegates took 24.7439ms
[debug]   Load.apply: Def.make(settings)... took 1130.0702ms
[debug]   Load.apply: structureIndex took 278.9006ms
[debug]   Load.apply: mkStreams took 6.4997ms
[info] loading global plugins from C:\Users\MA\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 11836.0379ms
[debug]           Load.loadUnit: plugins took 52.3861ms
[debug]           Load.loadUnit: defsScala took 0.0057ms
[debug] [Loading] Scanning directory C:\Users\MA\IdeaProjects\scala_project\project
[debug]             Load.loadUnit: mkEval took 14.9431ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MA\IdeaProjects\scala_project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.2877 ms
[info] loading settings for project scala_project-build from idea.sbt ...
[debug]               Load.resolveProject(scala_project-build) took 6.4834ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_project-build, base: C:\Users\MA\IdeaProjects\scala_project\project, plugins: List(<none>))) took 10.7647ms
[debug] [Loading] Done in C:\Users\MA\IdeaProjects\scala_project\project, returning: (scala_project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6260.5854ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.8928ms
[debug]         Load.loadUnit(file:/C:/Users/MA/IdeaProjects/scala_project/project/, ...) took 6327.4873ms
[debug]       Load.apply: load took 6331.0047ms
[debug]       Load.apply: resolveProjects took 0.2394ms
[debug]       Load.apply: finalTransforms took 24.177ms
[debug]       Load.apply: config.delegates took 0.6991ms
[debug]       Load.apply: Def.make(settings)... took 462.8587ms
[debug]       Load.apply: structureIndex took 94.4823ms
[debug]       Load.apply: mkStreams took 0.0226ms
[info] loading project definition from C:\Users\MA\IdeaProjects\scala_project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10566.9563ms
[debug]     Load.loadUnit: defsScala took 0.0088ms
[debug] [Loading] Scanning directory C:\Users\MA\IdeaProjects\scala_project
[debug]       Load.loadUnit: mkEval took 1.0643ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.4631 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 63.7691ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\MA\IdeaProjects\scala_project, plugins: List(<none>))) took 73.523ms
[debug] [Loading] Done in C:\Users\MA\IdeaProjects\scala_project, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 3469.6698ms
[debug]     Load.loadUnit: cleanEvalClasses took 43.3521ms
[debug]   Load.loadUnit(file:/C:/Users/MA/IdeaProjects/scala_project/, ...) took 14083.3263ms
[debug] Load.apply: load took 14087.9989ms
[debug] Load.apply: resolveProjects took 0.8599ms
[debug] Load.apply: finalTransforms took 50.3353ms
[debug] Load.apply: config.delegates took 0.6808ms
[debug] Load.apply: Def.make(settings)... took 164.6719ms
[debug] Load.apply: structureIndex took 60.3083ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to scala_project (in build file:/C:/Users/MA/IdeaProjects/scala_project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51055 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51055, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala_project (in build file:/C:/Users/MA/IdeaProjects/scala_project/)
[debug] > Exec(idea-shell, None, None)
